"""
Django settings for source_double project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
#import subprocess
#from dotenv import load_dotenv
import configparser
import json
config = configparser.ConfigParser()
config.read("source_double/environment/env")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'oknge3r^w67$q1p*a%lzjio22soejs^&nan!io(h)1xr_h-@ig'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'graphene_django',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'source_double.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'source_double.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

ENV_REF = config['DATABASE']['ENV_REF']
if ENV_REF == 'prod':
    DATABASES = {
        'default': {
            'ENGINE': 'mysql.connector.django',
            'NAME': config['DATABASE']['MYSQL_DATABASE'],
            'USER': config['DATABASE']['MYSQL_USER'],
            'PASSWORD': config['DATABASE']['MYSQL_PASSWORD'],
            'HOST': config['DATABASE']['MYSQL_HOST'],
            'PORT': config['DATABASE']['MYSQL_PORT'],
            'OPTIONS': {
            'autocommit': True,
            }
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

GRAPHENE = {
    'SCHEMA': 'source_double.schema.schema',
}

#incrementar a cada push/commit
VERSION = "0.0.2" 


TELEGRAM_ENV = {
    "API_ID": config['TELEGRAM']['API_ID'],
    "API_HASH": config['TELEGRAM']['API_HASH'],
    "API_CHANNEL": int(config['TELEGRAM']['API_CHANNEL']),
    "PHONE": int(config['TELEGRAM']['PHONE']),
    "USERNAME": config['TELEGRAM']['USERNAME'],
    "SOURCE_T_1": int(config['TELEGRAM']['SOURCE_T_1']),
    "SOURCE_T_2": int(config['TELEGRAM']['SOURCE_T_2']),
    "SOURCE_T_3": int(config['TELEGRAM']['SOURCE_T_3']),
    "SOURCE_T_4": int(config['TELEGRAM']['SOURCE_T_4']),
    "SOURCE_T_5": int(config['TELEGRAM']['SOURCE_T_5']),
    "SOURCE_T_6": int(config['TELEGRAM']['SOURCE_T_6']),
    "SOURCE_T_7": int(config['TELEGRAM']['SOURCE_T_7']),
    "SOURCE_T_8": int(config['TELEGRAM']['SOURCE_T_8']),
    "SOURCE_T_9": int(config['TELEGRAM']['SOURCE_T_9']),  
}
print("breack")
